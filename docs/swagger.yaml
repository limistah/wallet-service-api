basePath: /api/v1
definitions:
  APIResponse:
    properties:
      data: {}
      error:
        example: ""
        type: string
      message:
        example: Operation successful
        type: string
      success:
        example: true
        type: boolean
    type: object
  BalanceResponse:
    properties:
      balance:
        example: 1000.5
        type: number
      currency:
        example: USD
        type: string
      wallet_id:
        example: 1
        type: integer
    type: object
  ChangePasswordRequest:
    properties:
      current_password:
        example: oldpassword123
        type: string
      new_password:
        example: newpassword123
        minLength: 6
        type: string
    required:
    - current_password
    - new_password
    type: object
  CreateUserRequest:
    properties:
      age:
        example: 30
        type: integer
      email:
        example: john.doe@example.com
        type: string
      name:
        example: John Doe
        type: string
      password:
        example: password123
        minLength: 6
        type: string
    required:
    - email
    - name
    - password
    type: object
  CursorPaginationMeta:
    properties:
      has_next_page:
        example: true
        type: boolean
      next_cursor:
        example: eyJpZCI6MTAwLCJjcmVhdGVkX2F0IjoiMjAyMy0wMS0wMVQwMDowMDowMFoifQ==
        type: string
      page_size:
        example: 20
        type: integer
    type: object
  ErrorResponse:
    properties:
      error:
        example: Validation error
        type: string
      message:
        example: Operation failed
        type: string
      success:
        example: false
        type: boolean
    type: object
  FundWalletRequest:
    properties:
      amount:
        example: 100.5
        type: number
      description:
        example: Deposit from bank
        type: string
      reference:
        example: REF123456
        type: string
    required:
    - amount
    - reference
    type: object
  LoginRequest:
    properties:
      email:
        example: john.doe@example.com
        type: string
      password:
        example: password123
        type: string
    required:
    - email
    - password
    type: object
  LoginResponse:
    properties:
      token:
        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        type: string
      user:
        $ref: '#/definitions/UserResponse'
    type: object
  TransactionHistoryResponse:
    properties:
      pagination:
        $ref: '#/definitions/CursorPaginationMeta'
      transactions:
        items:
          $ref: '#/definitions/TransactionResponse'
        type: array
    type: object
  TransactionResponse:
    properties:
      amount:
        example: 100.5
        type: number
      balance_after:
        example: 1000.5
        type: number
      balance_before:
        example: 900
        type: number
      created_at:
        example: "2023-01-01T00:00:00Z"
        type: string
      description:
        example: Deposit from bank
        type: string
      id:
        example: 1
        type: integer
      reference:
        example: REF123456
        type: string
      status:
        example: COMPLETED
        type: string
      transaction_purpose:
        example: WITHDRAWAL
        type: string
      transaction_type:
        example: CREDIT
        type: string
      wallet_id:
        example: 1
        type: integer
    type: object
  TransferRequest:
    properties:
      amount:
        example: 75
        type: number
      description:
        example: Payment to friend
        type: string
      reference:
        example: TRF123456
        type: string
      to_wallet_id:
        example: 2
        type: integer
    required:
    - amount
    - reference
    - to_wallet_id
    type: object
  UserResponse:
    properties:
      age:
        example: 30
        type: integer
      created_at:
        example: "2023-01-01T00:00:00Z"
        type: string
      email:
        example: john.doe@example.com
        type: string
      id:
        example: 1
        type: integer
      name:
        example: John Doe
        type: string
      updated_at:
        example: "2023-01-01T00:00:00Z"
        type: string
    type: object
  WalletResponse:
    properties:
      balance:
        example: 1000.5
        type: number
      currency:
        example: USD
        type: string
      id:
        example: 1
        type: integer
      status:
        example: ACTIVE
        type: string
      user_id:
        example: 1
        type: integer
      version:
        example: 1
        type: integer
    type: object
  WithdrawRequest:
    properties:
      amount:
        example: 50.25
        type: number
      description:
        example: ATM withdrawal
        type: string
      reference:
        example: WTH123456
        type: string
    required:
    - amount
    - reference
    type: object
host: localhost:8080
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: A wallet service API for managing user wallets and transactions
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: Wallet Service API
  version: "1.0"
paths:
  /auth/change-password:
    post:
      consumes:
      - application/json
      description: Change the password for the authenticated user
      parameters:
      - description: Password change data
        in: body
        name: password
        required: true
        schema:
          $ref: '#/definitions/ChangePasswordRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/APIResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
      - BearerAuth: []
      summary: Change user password
      tags:
      - auth
  /auth/login:
    post:
      consumes:
      - application/json
      description: Authenticate user and return JWT token
      parameters:
      - description: User login credentials
        in: body
        name: credentials
        required: true
        schema:
          $ref: '#/definitions/LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/APIResponse'
            - properties:
                data:
                  $ref: '#/definitions/LoginResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Login user
      tags:
      - auth
  /auth/refresh:
    post:
      consumes:
      - application/json
      description: Generate a new JWT token using the current valid token
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/APIResponse'
            - properties:
                data:
                  additionalProperties:
                    type: string
                  type: object
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
      - BearerAuth: []
      summary: Refresh JWT token
      tags:
      - auth
  /auth/register:
    post:
      consumes:
      - application/json
      description: Register a new user with email and password
      parameters:
      - description: User registration data
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/CreateUserRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            allOf:
            - $ref: '#/definitions/APIResponse'
            - properties:
                data:
                  $ref: '#/definitions/UserResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorResponse'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Register a new user
      tags:
      - auth
  /health:
    get:
      description: Check if the server is running
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Health check
      tags:
      - health
  /wallets/me:
    get:
      consumes:
      - application/json
      description: Retrieve wallet information for the authenticated user
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/APIResponse'
            - properties:
                data:
                  $ref: '#/definitions/WalletResponse'
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get wallet by authenticated user
      tags:
      - wallets
  /wallets/me/balance:
    get:
      consumes:
      - application/json
      description: Retrieve current balance of the authenticated user's wallet
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/APIResponse'
            - properties:
                data:
                  $ref: '#/definitions/BalanceResponse'
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get wallet balance
      tags:
      - wallets
  /wallets/me/fund:
    post:
      consumes:
      - application/json
      description: Add money to the authenticated user's wallet
      parameters:
      - description: Fund wallet request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/FundWalletRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/APIResponse'
            - properties:
                data:
                  $ref: '#/definitions/TransactionResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ErrorResponse'
        "409":
          description: Duplicate reference
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
      - BearerAuth: []
      summary: Fund wallet
      tags:
      - wallets
  /wallets/me/transactions:
    get:
      consumes:
      - application/json
      description: Retrieve cursor-paginated transaction history for the authenticated
        user's wallet
      parameters:
      - description: Cursor for pagination
        in: query
        name: cursor
        type: string
      - default: 20
        description: Page size
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/APIResponse'
            - properties:
                data:
                  $ref: '#/definitions/TransactionHistoryResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get transaction history
      tags:
      - wallets
  /wallets/me/transfer:
    post:
      consumes:
      - application/json
      description: Transfer money from authenticated user's wallet to another wallet
      parameters:
      - description: Transfer request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/TransferRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/APIResponse'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/TransactionResponse'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ErrorResponse'
        "409":
          description: Duplicate reference or insufficient funds
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
      - BearerAuth: []
      summary: Transfer funds
      tags:
      - wallets
  /wallets/me/withdraw:
    post:
      consumes:
      - application/json
      description: Withdraw money from the authenticated user's wallet
      parameters:
      - description: Withdraw request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/WithdrawRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/APIResponse'
            - properties:
                data:
                  $ref: '#/definitions/TransactionResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ErrorResponse'
        "409":
          description: Duplicate reference or insufficient funds
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
      - BearerAuth: []
      summary: Withdraw funds
      tags:
      - wallets
securityDefinitions:
  BearerAuth:
    description: Type "Bearer" followed by a space and JWT token.
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
